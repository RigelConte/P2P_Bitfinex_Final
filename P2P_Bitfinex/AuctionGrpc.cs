// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: auction
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace P2P_Bitfinex
{

    public static partial class AuctionService
    {
        static readonly string __ServiceName = "AuctionService";

        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
        {
#if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
            if (message is global::Google.Protobuf.IBufferMessage)
            {
                context.SetPayloadLength(message.CalculateSize());
                global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
                context.Complete();
                return;
            }
#endif
            context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
        }

        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        static class __Helper_MessageCache<T>
        {
            public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
        }

        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
        {
#if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
            if (__Helper_MessageCache<T>.IsBufferMessage)
            {
                return parser.ParseFrom(context.PayloadAsReadOnlySequence());
            }
#endif
            return parser.ParseFrom(context.PayloadAsNewBuffer());
        }

        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        static readonly grpc::Marshaller<global::AuctionRequest> __Marshaller_AuctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AuctionRequest.Parser));
        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        static readonly grpc::Marshaller<global::AuctionResponse> __Marshaller_AuctionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AuctionResponse.Parser));
        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        static readonly grpc::Marshaller<global::BidRequest> __Marshaller_BidRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BidRequest.Parser));
        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        static readonly grpc::Marshaller<global::BidResponse> __Marshaller_BidResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BidResponse.Parser));

        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        static readonly grpc::Method<global::AuctionRequest, global::AuctionResponse> __Method_CreateAuction = new grpc::Method<global::AuctionRequest, global::AuctionResponse>(
            grpc::MethodType.Unary,
            __ServiceName,
            "CreateAuction",
            __Marshaller_AuctionRequest,
            __Marshaller_AuctionResponse);

        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        static readonly grpc::Method<global::BidRequest, global::BidResponse> __Method_PlaceBid = new grpc::Method<global::BidRequest, global::BidResponse>(
            grpc::MethodType.Unary,
            __ServiceName,
            "PlaceBid",
            __Marshaller_BidRequest,
            __Marshaller_BidResponse);

        /// <summary>Service descriptor</summary>
        public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
        {
            get { return global::AuctionReflection.Descriptor.Services[0]; }
        }

        /// <summary>Base class for server-side implementations of AuctionService</summary>
        [grpc::BindServiceMethod(typeof(AuctionService), "BindService")]
        public abstract partial class AuctionServiceBase
        {
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public virtual global::System.Threading.Tasks.Task<global::AuctionResponse> CreateAuction(global::AuctionRequest request, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public virtual global::System.Threading.Tasks.Task<global::BidResponse> PlaceBid(global::BidRequest request, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

        }

        /// <summary>Client for AuctionService</summary>
        public partial class AuctionServiceClient : grpc::ClientBase<AuctionServiceClient>
        {
            /// <summary>Creates a new client for AuctionService</summary>
            /// <param name="channel">The channel to use to make remote calls.</param>
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public AuctionServiceClient(grpc::ChannelBase channel) : base(channel)
            {
            }
            /// <summary>Creates a new client for AuctionService that uses a custom <c>CallInvoker</c>.</summary>
            /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public AuctionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
            {
            }
            /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            protected AuctionServiceClient() : base()
            {
            }
            /// <summary>Protected constructor to allow creation of configured clients.</summary>
            /// <param name="configuration">The client configuration.</param>
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            protected AuctionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public virtual global::AuctionResponse CreateAuction(global::AuctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return CreateAuction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public virtual global::AuctionResponse CreateAuction(global::AuctionRequest request, grpc::CallOptions options)
            {
                return CallInvoker.BlockingUnaryCall(__Method_CreateAuction, null, options, request);
            }
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public virtual grpc::AsyncUnaryCall<global::AuctionResponse> CreateAuctionAsync(global::AuctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return CreateAuctionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public virtual grpc::AsyncUnaryCall<global::AuctionResponse> CreateAuctionAsync(global::AuctionRequest request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(__Method_CreateAuction, null, options, request);
            }
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public virtual global::BidResponse PlaceBid(global::BidRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return PlaceBid(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public virtual global::BidResponse PlaceBid(global::BidRequest request, grpc::CallOptions options)
            {
                return CallInvoker.BlockingUnaryCall(__Method_PlaceBid, null, options, request);
            }
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public virtual grpc::AsyncUnaryCall<global::BidResponse> PlaceBidAsync(global::BidRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return PlaceBidAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            public virtual grpc::AsyncUnaryCall<global::BidResponse> PlaceBidAsync(global::BidRequest request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(__Method_PlaceBid, null, options, request);
            }
            /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
            [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
            protected override AuctionServiceClient NewInstance(ClientBaseConfiguration configuration)
            {
                return new AuctionServiceClient(configuration);
            }
        }

        /// <summary>Creates service definition that can be registered with a server</summary>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        public static grpc::ServerServiceDefinition BindService(AuctionServiceBase serviceImpl)
        {
            return grpc::ServerServiceDefinition.CreateBuilder()
                .AddMethod(__Method_CreateAuction, serviceImpl.CreateAuction)
                .AddMethod(__Method_PlaceBid, serviceImpl.PlaceBid).Build();
        }

        /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
        /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
        /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
        public static void BindService(grpc::ServiceBinderBase serviceBinder, AuctionServiceBase serviceImpl)
        {
            serviceBinder.AddMethod(__Method_CreateAuction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuctionRequest, global::AuctionResponse>(serviceImpl.CreateAuction));
            serviceBinder.AddMethod(__Method_PlaceBid, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::BidRequest, global::BidResponse>(serviceImpl.PlaceBid));
        }

    }
}
#endregion
